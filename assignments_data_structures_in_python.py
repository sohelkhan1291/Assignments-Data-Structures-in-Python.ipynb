# -*- coding: utf-8 -*-
"""Assignments: Data Structures in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tys06j2tOwgq9AyVENGcNsMF_v0P5JyE
"""



"""1 question"""

def reverse_string(string):
    return string[::-1]

# Example usage:
original_string = "Hello, world!"
reversed_string = reverse_string(original_string)
print("Original string:", original_string)
print("Reversed string:", reversed_string)

"""2"""

def count_vowels(string):
    vowels = "aeiouAEIOU"
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count

# Example usage:
input_string = "Hello, how are you?"
num_vowels = count_vowels(input_string)
print("Number of vowels:", num_vowels)

"""3"""

def is_palindrome(string):
    # Convert the string to lowercase to make the comparison case-insensitive
    string = string.lower()
    # Remove non-alphanumeric characters
    string = ''.join(char for char in string if char.isalnum())
    # Check if the string is equal to its reverse
    return string == string[::-1]

# Example usage:
input_string = "A man, a plan, a canal, Panama!"
result = is_palindrome(input_string)
if result:
    print("The string is a palindrome.")
else:
    print("The string is not a palindrome.")

"""4"""

def are_anagrams(string1, string2):
    # Convert both strings to lowercase
    string1 = string1.lower()
    string2 = string2.lower()

    # Remove non-alphanumeric characters and spaces
    string1 = ''.join(char for char in string1 if char.isalnum())
    string2 = ''.join(char for char in string2 if char.isalnum())

    # Check if the sorted versions of the strings are equal
    return sorted(string1) == sorted(string2)

# Example usage:
input_string1 = "Listen"
input_string2 = "Silent"
result = are_anagrams(input_string1, input_string2)
if result:
    print("The strings are anagrams of each other.")
else:
    print("The strings are not anagrams of each other.")

"""5"""

def find_substring_occurrences(main_string, substring):
    occurrences = []
    index = main_string.find(substring)
    while index != -1:
        occurrences.append(index)
        index = main_string.find(substring, index + 1)
    return occurrences

# Example usage:
main_string = "Hello, hello, how are you?"
substring = "hello"
result = find_substring_occurrences(main_string.lower(), substring.lower())
print("Occurrences of '{}' in '{}': {}".format(substring, main_string, result))

"""6"""

def compress_string(string):
    compressed_string = ""
    count = 1
    # Iterate through the string
    for i in range(len(string)):
        # If the current character is the same as the next one, increment count
        if i + 1 < len(string) and string[i] == string[i + 1]:
            count += 1
        else:
            # Append the character and its count to the compressed string
            compressed_string += string[i] + str(count)
            # Reset the count
            count = 1
    # If the compressed string is longer than the original string, return the original string
    if len(compressed_string) >= len(string):
        return string
    else:
        return compressed_string

# Example usage:
input_string = "aabcccccaaa"
compressed_result = compress_string(input_string)
print("Compressed string:", compressed_result)

"""7"""

def has_unique_characters(string):
    # Create a set to store unique characters
    seen = set()
    # Iterate through the string
    for char in string:
        # If the character is already in the set, return False
        if char in seen:
            return False
        # Otherwise, add the character to the set
        seen.add(char)
    # If all characters are unique, return True
    return True

# Example usage:
input_string = "abcdefg"
result = has_unique_characters(input_string)
if result:
    print("The string has all unique characters.")
else:
    print("The string does not have all unique characters.")

"""8"""

def convert_case(string, to_uppercase=True):
    if to_uppercase:
        return string.upper()
    else:
        return string.lower()

# Example usage:
input_string = "Hello, World!"
choice = input("Enter 'U' to convert to uppercase, 'L' to convert to lowercase: ").upper()
if choice == 'U':
    result = convert_case(input_string, to_uppercase=True)
    print("String in uppercase:", result)
elif choice == 'L':
    result = convert_case(input_string, to_uppercase=False)
    print("String in lowercase:", result)
else:
    print("Invalid choice! Please enter 'U' or 'L'.")

"""9"""

def count_words(input_string):
    # Split the input string by whitespace to get a list of words
    words = input_string.split()
    # Return the length of the list, which is the word count
    return len(words)

# Example usage:
input_string = "The quick brown fox jumps over the lazy dog"
word_count = count_words(input_string)
print(f"Number of words: {word_count}")

"""10

JOIN
"""

def concatenate_strings(str1, str2):
    return ''.join([str1, str2])

# Example usage:
string1 = "Hello"
string2 = "World"
result = concatenate_strings(string1, string2)
print(result)  # Output: HelloWorld

"""FORMAT"""

def concatenate_strings(str1, str2):
    return "{}{}".format(str1, str2)

# Example usage:
string1 = "Hello"
string2 = "World"
result = concatenate_strings(string1, string2)
print(result)  # Output: HelloWorld

"""F STRINGS"""

def concatenate_strings(str1, str2):
    return f"{str1}{str2}"

# Example usage:
string1 = "Hello"
string2 = "World"
result = concatenate_strings(string1, string2)
print(result)  # Output: HelloWorld